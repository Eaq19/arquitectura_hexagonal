package com.example.bddspringboot.bus;

import static org.junit.jupiter.api.Assertions.*;

import java.util.Map;
import java.util.concurrent.BlockingQueue;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.KafkaMessageListenerContainer;
import org.springframework.kafka.test.EmbeddedKafkaBroker;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringRunner;

import com.example.bddspringboot.modelo.EventoClienteCreado;

@RunWith(SpringRunner.class)
@SpringBootTest
@DirtiesContext
@EmbeddedKafka(topics = EventoClienteCreado.TOPIC, brokerProperties = { "listeners=PLAINTEXT://localhost:9092",
		"auto.create.topics.enable=false", "port=9092" })
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class KafkaProducerTest {

	private BlockingQueue<ConsumerRecord<String, String>> records;

	private KafkaMessageListenerContainer<String, String> container;
	
	@Autowired
    private EmbeddedKafkaBroker embeddedKafkaBroker;

	 private Map<String, Object> getConsumerProperties() {
	        return Map.of(
	                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, embeddedKafkaBroker.getBrokersAsString(),
	                ConsumerConfig.GROUP_ID_CONFIG, "consumer",
	                ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "true",
	                ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, "10",
	                ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, "60000",
	                ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class,
	                ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class,
	                ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
	    }
	
	@BeforeAll
	void setUp() throws Exception {
		DefaultKafkaConsumerFactory<String, String> consumerFactory = new DefaultKafkaConsumerFactory<>(
				getConsumerProperties());
		ContainerProperties containerProperties = new ContainerProperties("com.madadipouya.kafka.user");
		container = new KafkaMessageListenerContainer<>(consumerFactory, containerProperties);
		records = new LinkedBlockingQueue<>();
		container.setupMessageListener((MessageListener<String, String>) records::add);
		container.start();
		ContainerTestUtils.waitForAssignment(container, embeddedKafkaBroker.getPartitionsPerTopic());
	}

	@AfterAll
	void tearDown() throws Exception {
	}

	@Test
	void test() {
		fail("Not yet implemented");
	}

}
