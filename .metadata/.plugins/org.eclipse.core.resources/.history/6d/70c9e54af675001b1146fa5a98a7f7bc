package com.example.bddspringboot.bus;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.timeout;
import static org.mockito.Mockito.verify;

import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.context.annotation.Bean;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.KafkaListenerEndpointRegistry;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.listener.MessageListenerContainer;
import org.springframework.kafka.support.serializer.JsonSerializer;
import org.springframework.kafka.test.EmbeddedKafkaBroker;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.kafka.test.utils.ContainerTestUtils;
import org.springframework.kafka.test.utils.KafkaTestUtils;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.junit4.SpringRunner;

import com.example.bddspringboot.modelo.EventoClienteCreado;
import com.example.bddspringboot.servicio.ServicioEventoClienteCreado;

@RunWith(SpringRunner.class)
@SpringBootTest
@DirtiesContext
@EmbeddedKafka(
		partitions = 1, 
		topics = EventoClienteCreado.TOPIC,
        brokerProperties = {"listeners=PLAINTEXT://localhost:9092", "auto.create.topics.enable=false", "port=9092"})
class ConsumidorEventoClienteCreadoIT {
	
	@TestConfiguration
    public static class TestConfig {
		
		@Bean
	    public ProducerFactory<UUID, EventoClienteCreado> producerFactory() {
	        Map<String, Object> configProps = new HashMap<>();

	        configProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	        configProps.put(ConsumerConfig.GROUP_ID_CONFIG, "bdd-spring-boot");
	        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, UuidSerializer.class);
	        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, EventoClienteCreadoSerializer.class);
	        configProps.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, false);

	        return new DefaultKafkaProducerFactory<>(configProps);
	    }

	    @Bean
	    public KafkaTemplate<UUID, EventoClienteCreado> kafkaTemplate() {
	    	KafkaTemplate<UUID, EventoClienteCreado> kafkaTemplate = new KafkaTemplate<>(producerFactory());
	    	kafkaTemplate.setDefaultTopic(EventoClienteCreado.TOPIC);
	        return kafkaTemplate;
	    }

	    @Bean
	    public ConsumerFactory<UUID, EventoClienteCreado> consumerFactory() {
	        Map<String, Object> configProps = new HashMap<>();
	        
	        configProps.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
	        configProps.put(ConsumerConfig.GROUP_ID_CONFIG, "bdd-spring-boot");
	        configProps.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, UuidDeserializer.class);
	        configProps.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, EventoClienteCreadoDeserializer.class);
	        configProps.put(JsonSerializer.ADD_TYPE_INFO_HEADERS, false);
	        
	        return new DefaultKafkaConsumerFactory<>(configProps);
	    }

	    @Bean
	    public ConcurrentKafkaListenerContainerFactory<UUID, EventoClienteCreado> kafkaListenerContainerFactory() {
	        ConcurrentKafkaListenerContainerFactory<UUID, EventoClienteCreado> factory = new ConcurrentKafkaListenerContainerFactory<>();
	        factory.setConsumerFactory(consumerFactory());
	        
	        return factory;
	    }

	}
	
	@MockBean
	private ServicioEventoClienteCreado servicio;
	
	@Autowired
    private KafkaTemplate<UUID, EventoClienteCreado> kafkaTemplate;
	
	@Autowired
    private EmbeddedKafkaBroker kafkaEmbedded;
	
	@Autowired
    private KafkaListenerEndpointRegistry kafkaListenerEndpointRegistry;
	
	@Before
    public void setUp() throws Exception {
        for (MessageListenerContainer messageListenerContainer : kafkaListenerEndpointRegistry.getListenerContainers()) {
            ContainerTestUtils.waitForAssignment(messageListenerContainer, kafkaEmbedded.getPartitionsPerTopic());
        }
    }
	
	@Test
	void dadoEventoClienteCreadoEntoncesRegistraPerfilCliente() {
		//Given
		UUID id = UUID.randomUUID();
		EventoClienteCreado evento = EventoClienteCreado.builder().id(id).nombre("Edison").fechaNacimiento(LocalDate.of(1995, 2, 28)).email("edison@hotmail.com").telefono("+57 1234567891").build();

		//When
		kafkaTemplate.send(EventoClienteCreado.TOPIC, id, evento);
		
		//Then
		 
		ArgumentCaptor<EventoClienteCreado> eventoCaptor = ArgumentCaptor.forClass(EventoClienteCreado.class);
        verify(servicio, timeout(10000)).registrar(eventoCaptor.capture());
        EventoClienteCreado result = eventoCaptor.getValue();
		
		assertThat(result, is(not(nullValue())));
		assertThat(result.getId(), is(id));
		assertThat(result.getNombre(), is("Edison"));
		assertThat(result.getFechaNacimiento(), is(LocalDate.of(1995, 2, 28)));
		assertThat(result.getEmail(), is("edison@hotmail.com"));
		assertThat(result.getTelefono(), is("+57 1234567891"));
	}

}
