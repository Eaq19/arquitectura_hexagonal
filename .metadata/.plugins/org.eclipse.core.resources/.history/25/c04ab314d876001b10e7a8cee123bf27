package com.example.bddspringboot.bus;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.junit.Assert.assertThat;

import java.time.LocalDate;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.ContainerProperties;
import org.springframework.kafka.listener.KafkaMessageListenerContainer;
import org.springframework.kafka.listener.MessageListener;
import org.springframework.kafka.test.EmbeddedKafkaBroker;
import org.springframework.kafka.test.context.EmbeddedKafka;
import org.springframework.kafka.test.utils.ContainerTestUtils;
import org.springframework.test.context.junit4.SpringRunner;

import com.example.bddspringboot.modelo.EventoClienteCreado;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

@RunWith(SpringRunner.class)
@EmbeddedKafka
@SpringBootTest(properties = "spring.kafka.bootstrap-servers=${spring.embedded.kafka.brokers}")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class KafkaProducerTest {

	private BlockingQueue<ConsumerRecord<String, EventoClienteCreado>> records;

	private KafkaMessageListenerContainer<String, String> container;

	@Autowired
	private EmbeddedKafkaBroker embeddedKafkaBroker;
	
	@Autowired
	private KafkaProducer producer;
	
	@Autowired
	private ObjectMapper objectMapper;
	
	@Value("${spring.kafka.topic.name}")
	private String topic;

	private Map<String, Object> getConsumerProperties() {
		return Map.of(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, embeddedKafkaBroker.getBrokersAsString(),
				ConsumerConfig.GROUP_ID_CONFIG, "consumer", ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, "true",
				ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, "10", ConsumerConfig.SESSION_TIMEOUT_MS_CONFIG, "60000",
				ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class,
				ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class,
				ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
	}

	@BeforeAll
	void setUp() throws Exception {
		DefaultKafkaConsumerFactory<String, String> consumerFactory = new DefaultKafkaConsumerFactory<>(
				getConsumerProperties());
		ContainerProperties containerProperties = new ContainerProperties(topic);
		container = new KafkaMessageListenerContainer<>(consumerFactory, containerProperties);
		records = new LinkedBlockingQueue<>();
		container.setupMessageListener((MessageListener<String, EventoClienteCreado>) records::add);
		container.start();
		ContainerTestUtils.waitForAssignment(container, embeddedKafkaBroker.getPartitionsPerTopic());
	}

	@AfterAll
	void tearDown() throws Exception {
		container.stop();
	}

	@Test
	void test() throws InterruptedException, JsonMappingException, JsonProcessingException {
		//Given
		UUID id = UUID.randomUUID();
		EventoClienteCreado evento = EventoClienteCreado.builder().id(id).nombre("Edison").fechaNacimiento(LocalDate.of(1995, 2, 28)).email("edison@hotmail.com").telefono("+57 1234567891").build();
		
		//When
		producer.writeToKakfka(evento);
		
		//Then
		ConsumerRecord<String, EventoClienteCreado> message = records.poll(500, TimeUnit.MILLISECONDS);
		assertThat(message, is(not(nullValue())));
		assertThat(message.key(), is(id.toString()));
		
		EventoClienteCreado result = objectMapper.readValue(message.value(), EventoClienteCreado.class);
		assertThat(result, is(not(nullValue())));
		assertThat(result.getId(), is(id));
		assertThat(result.getNombre(), is("Edison"));
		assertThat(result.getFechaNacimiento(), is(LocalDate.of(1995, 2, 28)));
		assertThat(result.getEmail(), is("edison@hotmail.com"));
		assertThat(result.getTelefono(), is("+57 1234567891"));
	}

}
